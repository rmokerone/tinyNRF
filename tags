!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AVRDUDE	Makefile	/^AVRDUDE = avrdude$/;"	m
AVRDUDE_FLAGS	Makefile	/^AVRDUDE_FLAGS = -c usbasp -F$/;"	m
BAUD	uart.h	6;"	d
BAUD_SETTING	uart.h	12;"	d
BIT	main.h	22;"	d
CC	Makefile	/^CC             = avr-gcc$/;"	m
CD	nrf24l01.h	41;"	d
CE	main.h	31;"	d
CE_CLR	spi.h	18;"	d
CE_EN	spi.h	19;"	d
CLEARBIT	main.h	26;"	d
CLEARBITS	main.h	24;"	d
CMD_MODE	main.h	41;"	d
CONFIG	nrf24l01.h	33;"	d
CRYSTAL	uart.h	9;"	d
CSN	main.h	32;"	d
CSN_CLR	spi.h	15;"	d
CSN_EN	spi.h	16;"	d
DEFS	Makefile	/^DEFS           =$/;"	m
DFLAGS	Makefile	/^override LDFLAGS       = -Wl,-Map,$(PRG).map$/;"	m
EN_AA	nrf24l01.h	34;"	d
EN_RXADDR	nrf24l01.h	35;"	d
EXTRA_CLEAN_FILES	Makefile	/^EXTRA_CLEAN_FILES       = *.hex *.bin *.srec$/;"	m
FIFO_STATUS	nrf24l01.h	55;"	d
FIG2DEV	Makefile	/^FIG2DEV                 = fig2dev$/;"	m
FLAGS	Makefile	/^override CFLAGS        = -g -Wall $(OPTIMIZE) -mmcu=$(MCU_TARGET) $(DEFS)$/;"	m
FLUSH_RX	nrf24l01.h	27;"	d
FLUSH_TX	nrf24l01.h	26;"	d
F_CPU	main.h	13;"	d
IRQ	main.h	36;"	d
ISR	uart.c	/^ISR (USART_RX_vect)$/;"	f
LIBS	Makefile	/^LIBS           =$/;"	m
MCU_TARGET	Makefile	/^MCU_TARGET     = atmega88$/;"	m
MISO	main.h	34;"	d
MOSI	main.h	33;"	d
NOMAL_MODE	main.h	42;"	d
NOP	nrf24l01.h	29;"	d
OBJ	Makefile	/^OBJ            = main.o uart.o spi.o nrf24l01.o$/;"	m
OBJCOPY	Makefile	/^OBJCOPY        = avr-objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP        = avr-objdump$/;"	m
OPTIMIZE	Makefile	/^OPTIMIZE       = -O2$/;"	m
PRG	Makefile	/^PRG            = main$/;"	m
RD_RX_PLOAD	nrf24l01.h	24;"	d
READ_REG	nrf24l01.h	22;"	d
REUSE_TX_PL	nrf24l01.h	28;"	d
RF_CH	nrf24l01.h	38;"	d
RF_SETUP	nrf24l01.h	39;"	d
RX_ADDR_P0	nrf24l01.h	42;"	d
RX_ADDR_P1	nrf24l01.h	43;"	d
RX_ADDR_P2	nrf24l01.h	44;"	d
RX_ADDR_P3	nrf24l01.h	45;"	d
RX_ADDR_P4	nrf24l01.h	46;"	d
RX_ADDR_P5	nrf24l01.h	47;"	d
RX_MODE	main.h	44;"	d
RX_PW_P0	nrf24l01.h	49;"	d
RX_PW_P1	nrf24l01.h	50;"	d
RX_PW_P2	nrf24l01.h	51;"	d
RX_PW_P3	nrf24l01.h	52;"	d
RX_PW_P4	nrf24l01.h	53;"	d
RX_PW_P5	nrf24l01.h	54;"	d
SCK	main.h	35;"	d
SETBIT	main.h	25;"	d
SETBITS	main.h	23;"	d
SETUP_AW	nrf24l01.h	36;"	d
SETUP_RETR	nrf24l01.h	37;"	d
STATUS	nrf24l01.h	40;"	d
STA_MARK_MX	nrf24l01.h	58;"	d
STA_MARK_RX	nrf24l01.h	56;"	d
STA_MARK_TX	nrf24l01.h	57;"	d
TX_ADDR	nrf24l01.h	48;"	d
TX_ADDRESS	main.c	/^uchar TX_ADDRESS[TX_ADR_WIDTH] = {0x34, 0x43, 0x10, 0x10, 0x01};$/;"	v
TX_ADR_WIDTH	nrf24l01.h	17;"	d
TX_MODE	main.h	43;"	d
TX_PLOAD_WIDTH	nrf24l01.h	19;"	d
WRITE_REG	nrf24l01.h	23;"	d
WR_TX_PLOAD	nrf24l01.h	25;"	d
__MAIN_H__	main.h	8;"	d
__NRF24L01_H__	nrf24l01.h	9;"	d
__SPI_H__	spi.h	8;"	d
__UART_H__	uart.h	3;"	d
checkId	nrf24l01.c	/^void checkId(void)$/;"	f
enterRxMode	nrf24l01.c	/^void enterRxMode(uchar* rxAddr)$/;"	f
enterTxMode	nrf24l01.c	/^void enterTxMode(uchar * txAddr, uchar* txBuf)$/;"	f
flushAll	nrf24l01.c	/^void flushAll(void)$/;"	f
flushRT	nrf24l01.c	/^void flushRT(uchar RT)$/;"	f
getAddr	main.c	/^uchar getAddr(void)$/;"	f
getCommand	main.c	/^void getCommand(void)$/;"	f
getRT	main.c	/^void getRT(void)$/;"	f
logoPrint	main.c	/^void logoPrint(void)$/;"	f
main	main.c	/^int main (void)$/;"	f
mode	main.c	/^uchar mode = CMD_MODE;$/;"	v
mystdout	main.c	/^static FILE mystdout = FDEV_SETUP_STREAM (uartPutChar, NULL, _FDEV_SETUP_WRITE);$/;"	v	file:
nrfRecv	nrf24l01.c	/^uchar nrfRecv(uchar* rxAddr, uchar* rxBuf)$/;"	f
nrfSend	nrf24l01.c	/^uchar nrfSend(uchar* txAddr, uchar* txBuf)$/;"	f
powerDown	nrf24l01.c	/^void powerDown(void)$/;"	f
printAddr	main.c	/^void printAddr(uchar * souAddr)$/;"	f
printCmdRe	main.c	/^void printCmdRe()$/;"	f
printRTRe	main.c	/^void printRTRe(void)$/;"	f
rxBuf	main.c	/^uchar rxBuf[TX_PLOAD_WIDTH];$/;"	v
scanAddr	main.c	/^ uchar scanAddr(void)$/;"	f
spiInit	spi.c	/^void spiInit(void)$/;"	f
spiRead	spi.c	/^uchar spiRead (uchar reg)$/;"	f
spiReadBuf	spi.c	/^uchar spiReadBuf (uchar reg, uchar *pBuf, uchar bytes)$/;"	f
spiRw	spi.c	/^uchar spiRw (uchar byte)$/;"	f
spiRwReg	spi.c	/^uchar spiRwReg (uchar reg, uchar value)$/;"	f
spiWriteBuf	spi.c	/^uchar spiWriteBuf (uchar reg, uchar *pBuf, uchar bytes)$/;"	f
termialInit	main.c	/^void termialInit(void)$/;"	f
txAddr	main.c	/^uchar txAddr[TX_ADR_WIDTH];$/;"	v
txBuf	main.c	/^uchar txBuf[TX_PLOAD_WIDTH];$/;"	v
uartInit	uart.c	/^void uartInit(unsigned int baud)$/;"	f
uartPutChar	uart.c	/^int uartPutChar (char c, FILE * stream)$/;"	f
uartRecvChar	uart.c	/^unsigned char uartRecvChar (void)$/;"	f
uartRecvData	uart.h	/^volatile unsigned char uartRecvData;$/;"	v
uartRxISR	uart.c	/^unsigned char uartRxISR(void)$/;"	f
uchar	main.h	48;"	d
uint	main.h	49;"	d
